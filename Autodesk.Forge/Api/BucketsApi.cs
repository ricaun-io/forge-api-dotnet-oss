/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model;

namespace Autodesk.Forge {
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IBucketsApi : IApiAccessor {
		#region Synchronous Operations
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Bucket</returns>
		/*Bucket*/
		dynamic CreateBucket (PostBucketsPayload postBuckets, string region = null);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>ApiResponse of Bucket</returns>
		ApiResponse</*Bucket*/dynamic> CreateBucketWithHttpInfo (PostBucketsPayload postBuckets, string region = null);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will delete a bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns></returns>
		void DeleteBucket (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will delete a bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> DeleteBucketWithHttpInfo (string bucketKey);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Bucket</returns>
		/*Bucket*/
		dynamic GetBucketDetails (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>ApiResponse of Bucket</returns>
		ApiResponse</*Bucket*/dynamic> GetBucketDetailsWithHttpInfo (string bucketKey);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Buckets</returns>
		/*Buckets*/
		dynamic GetBuckets (string region = null, int? limit = null, string startAt = null);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>ApiResponse of Buckets</returns>
		ApiResponse</*Buckets*/dynamic> GetBucketsWithHttpInfo (string region = null, int? limit = null, string startAt = null);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Task of Bucket</returns>
		System.Threading.Tasks.Task</*Bucket*/dynamic> CreateBucketAsync (PostBucketsPayload postBuckets, string region = null);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Task of ApiResponse (Bucket)</returns>
		System.Threading.Tasks.Task<ApiResponse</*Bucket*/dynamic>> CreateBucketAsyncWithHttpInfo (PostBucketsPayload postBuckets, string region = null);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will delete a bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task DeleteBucketAsync (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will delete a bucket. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBucketAsyncWithHttpInfo (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of Bucket</returns>
		System.Threading.Tasks.Task</*Bucket*/dynamic> GetBucketDetailsAsync (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of ApiResponse (Bucket)</returns>
		System.Threading.Tasks.Task<ApiResponse</*Bucket*/dynamic>> GetBucketDetailsAsyncWithHttpInfo (string bucketKey);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Task of Buckets</returns>
		System.Threading.Tasks.Task</*Buckets*/dynamic> GetBucketsAsync (string region = null, int? limit = null, string startAt = null);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </remarks>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Task of ApiResponse (Buckets)</returns>
		System.Threading.Tasks.Task<ApiResponse</*Buckets*/dynamic>> GetBucketsAsyncWithHttpInfo (string region = null, int? limit = null, string startAt = null);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class BucketsApi : IBucketsApi {
        private const string HeaderParamRegion = "region";
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="BucketsApi"/> class.
		/// </summary>
		/// <returns></returns>
		public BucketsApi (String basePath) {
			this.Configuration = new Configuration (new ApiClient (basePath));

			ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if ( Configuration.ApiClient.Configuration == null ) {
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="BucketsApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public BucketsApi (Configuration configuration = null) {
			if ( configuration == null ) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if ( Configuration.ApiClient.Configuration == null ) {
				Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath () {
			return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString ();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete ("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath (String basePath) {
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration { get; set; }

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory {
			get {
				if ( _exceptionFactory != null && _exceptionFactory.GetInvocationList ().Length > 1 ) {
					throw new InvalidOperationException ("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete ("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader () {
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete ("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader (string key, string value) {
			this.Configuration.AddDefaultHeader (key, value);
		}

		/// <summary>
		///  Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Bucket</returns>
		public /*Bucket*/dynamic CreateBucket (PostBucketsPayload postBuckets, string region = null) {
			ApiResponse</*Bucket*/dynamic> localVarResponse = CreateBucketWithHttpInfo (postBuckets, region);
			return localVarResponse.Data;
		}

		/// <summary>
		///  Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>ApiResponse of Bucket</returns>
		public ApiResponse</*Bucket*/dynamic> CreateBucketWithHttpInfo (PostBucketsPayload postBuckets, string region = null) {
			// verify the required parameter 'postBuckets' is set
			if ( postBuckets == null )
				throw new ApiException (400, "Missing required parameter 'postBuckets' when calling BucketsApi->CreateBucket");

			var localVarPath = "/oss/v2/buckets";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( region != null && localVarHeaderParams.ContainsKey (HeaderParamRegion) )
				localVarHeaderParams [HeaderParamRegion] = Configuration.ApiClient.ParameterToString (region); // header parameter
			else if ( region != null )
				localVarHeaderParams.Add (HeaderParamRegion, Configuration.ApiClient.ParameterToString (region)); // header parameter
			if ( postBuckets != null && postBuckets.GetType () == typeof (byte []) ) // http body (model) parameter
			{
				localVarPostBody = postBuckets; // byte array
			} else if ( postBuckets != null
					   && (postBuckets.GetType () == typeof (System.IO.FileStream)
						   || postBuckets.GetType () == typeof (System.IO.BinaryReader)
						   || postBuckets.GetType () == typeof (System.IO.BufferedStream)
						   || postBuckets.GetType () == typeof (System.IO.MemoryStream)
						   || postBuckets.GetType () == typeof (System.IO.StreamReader)
						  )
					  ) {
				localVarPostBody = Configuration.ApiClient.toByteArray (postBuckets); // byte array
			} else if ( postBuckets != null ) {
				localVarPostBody = Configuration.ApiClient.Serialize (postBuckets);
			}

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi (localVarPath,
				Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("CreateBucket", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			ApiResponse<dynamic> apiResponse = new ApiResponse</*Bucket*/dynamic> (
				localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				/*(Bucket)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Bucket))
			);
			return apiResponse;
		}

		/// <summary>
		///  Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Task of Bucket</returns>
		public async System.Threading.Tasks.Task</*Bucket*/dynamic> CreateBucketAsync (PostBucketsPayload postBuckets, string region = null) {
			ApiResponse</*Bucket*/dynamic> localVarResponse = await CreateBucketAsyncWithHttpInfo (postBuckets, region);
			return localVarResponse.Data;

		}

		/// <summary>
		///  Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="postBuckets">Body Structure</param>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <returns>Task of ApiResponse (Bucket)</returns>
		public async System.Threading.Tasks.Task<ApiResponse</*Bucket*/dynamic>> CreateBucketAsyncWithHttpInfo (PostBucketsPayload postBuckets, string region = null) {
			// verify the required parameter 'postBuckets' is set
			if ( postBuckets == null )
				throw new ApiException (400, "Missing required parameter 'postBuckets' when calling BucketsApi->CreateBucket");

			var localVarPath = "/oss/v2/buckets";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( region != null && localVarHeaderParams.ContainsKey (HeaderParamRegion) )
				localVarHeaderParams [HeaderParamRegion] = Configuration.ApiClient.ParameterToString (region); // header parameter
			else if (region != null )
				localVarHeaderParams.Add (HeaderParamRegion, Configuration.ApiClient.ParameterToString (region)); // header parameter
			if ( postBuckets != null && postBuckets.GetType () == typeof (byte []) ) // http body (model) parameter
			{
				localVarPostBody = postBuckets; // byte array
			} else if ( postBuckets != null
					   && (postBuckets.GetType () == typeof (System.IO.FileStream)
						   || postBuckets.GetType () == typeof (System.IO.BinaryReader)
						   || postBuckets.GetType () == typeof (System.IO.BufferedStream)
						   || postBuckets.GetType () == typeof (System.IO.MemoryStream)
						   || postBuckets.GetType () == typeof (System.IO.StreamReader)
						  )
					  ) {
				localVarPostBody = Configuration.ApiClient.toByteArray (postBuckets); // byte array
			} else if ( postBuckets != null ) {
				localVarPostBody = Configuration.ApiClient.Serialize (postBuckets);
			}

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync (localVarPath,
				Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("CreateBucket", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			return new ApiResponse</*Bucket*/dynamic> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				/*(Bucket)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Bucket)));

		}

		/// <summary>
		///  This endpoint will delete a bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns></returns>
		public void DeleteBucket (string bucketKey) {
			DeleteBucketWithHttpInfo (bucketKey);
		}

		/// <summary>
		///  This endpoint will delete a bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> DeleteBucketWithHttpInfo (string bucketKey) {
			// verify the required parameter 'bucketKey' is set
			if ( bucketKey == null )
				throw new ApiException (400, "Missing required parameter 'bucketKey' when calling BucketsApi->DeleteBucket");

			var localVarPath = "/oss/v2/buckets/{bucketKey}";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( bucketKey != null )
				localVarPathParams.Add ("bucketKey", Configuration.ApiClient.ParameterToString (bucketKey)); // path parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi (localVarPath,
				Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("DeleteBucket", localVarResponse);
				if ( exception != null )
					throw exception;
			}


			return new ApiResponse<Object> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				null);
		}

		/// <summary>
		///  This endpoint will delete a bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task DeleteBucketAsync (string bucketKey) {
			await DeleteBucketAsyncWithHttpInfo (bucketKey);

		}

		/// <summary>
		///  This endpoint will delete a bucket. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBucketAsyncWithHttpInfo (string bucketKey) {
			// verify the required parameter 'bucketKey' is set
			if ( bucketKey == null )
				throw new ApiException (400, "Missing required parameter 'bucketKey' when calling BucketsApi->DeleteBucket");

			var localVarPath = "/oss/v2/buckets/{bucketKey}";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( bucketKey != null )
				localVarPathParams.Add ("bucketKey", Configuration.ApiClient.ParameterToString (bucketKey)); // path parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync (localVarPath,
				Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("DeleteBucket", localVarResponse);
				if ( exception != null )
					throw exception;
			}


			return new ApiResponse<Object> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				null);
		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Bucket</returns>
		public /*Bucket*/dynamic GetBucketDetails (string bucketKey) {
			ApiResponse</*Bucket*/dynamic> localVarResponse = GetBucketDetailsWithHttpInfo (bucketKey);
			return localVarResponse.Data;
		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>ApiResponse of Bucket</returns>
		public ApiResponse< /*Bucket*/dynamic> GetBucketDetailsWithHttpInfo (string bucketKey) {
			// verify the required parameter 'bucketKey' is set
			if ( bucketKey == null )
				throw new ApiException (400, "Missing required parameter 'bucketKey' when calling BucketsApi->GetBucketDetails");

			var localVarPath = "/oss/v2/buckets/{bucketKey}/details";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( bucketKey != null )
				localVarPathParams.Add ("bucketKey", Configuration.ApiClient.ParameterToString (bucketKey)); // path parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi (localVarPath,
				Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("GetBucketDetails", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			ApiResponse<dynamic> apiResponse = new ApiResponse</*Bucket*/dynamic> (localVarStatusCode,
							localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
							/*(Bucket)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Bucket)));
			return apiResponse;

		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of Bucket</returns>
		public async System.Threading.Tasks.Task</*Bucket*/dynamic> GetBucketDetailsAsync (string bucketKey) {
			ApiResponse</*Bucket*/dynamic> localVarResponse = await GetBucketDetailsAsyncWithHttpInfo (bucketKey);
			return localVarResponse.Data;

		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination.
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="bucketKey">URL-encoded bucket key</param>
		/// <returns>Task of ApiResponse (Bucket)</returns>
		public async System.Threading.Tasks.Task<ApiResponse</*Bucket*/dynamic>> GetBucketDetailsAsyncWithHttpInfo (string bucketKey) {
			// verify the required parameter 'bucketKey' is set
			if ( bucketKey == null )
				throw new ApiException (400, "Missing required parameter 'bucketKey' when calling BucketsApi->GetBucketDetails");

			var localVarPath = "/oss/v2/buckets/{bucketKey}/details";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			//localVarPathParams.Add("format", "json");
			if ( bucketKey != null )
				localVarPathParams.Add ("bucketKey", Configuration.ApiClient.ParameterToString (bucketKey)); // path parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync (localVarPath,
				Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("GetBucketDetails", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			return new ApiResponse</*Bucket*/dynamic> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				/*(Bucket)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Bucket)));

		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Buckets</returns>
		public /*Buckets*/dynamic GetBuckets (string region = null, int? limit = null, string startAt = null) {
			ApiResponse</*Buckets*/dynamic> localVarResponse = GetBucketsWithHttpInfo (region, limit, startAt);
			return localVarResponse.Data;
		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>ApiResponse of Buckets</returns>
		public ApiResponse< /*Buckets*/dynamic> GetBucketsWithHttpInfo (string region = null, int? limit = null, string startAt = null) {

			var localVarPath = "/oss/v2/buckets";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( region != null )
				localVarQueryParams.Add ("region", Configuration.ApiClient.ParameterToString (region)); // query parameter
			if ( limit != null )
				localVarQueryParams.Add ("limit", Configuration.ApiClient.ParameterToString (limit)); // query parameter
			if ( startAt != null )
				localVarQueryParams.Add ("startAt", Configuration.ApiClient.ParameterToString (startAt)); // query parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi (localVarPath,
				Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("GetBuckets", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			return new ApiResponse</*Buckets*/dynamic> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				/*(Buckets)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Buckets)));

		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Task of Buckets</returns>
		public async System.Threading.Tasks.Task</*Buckets*/dynamic> GetBucketsAsync (string region = null, int? limit = null, string startAt = null) {
			ApiResponse</*Buckets*/dynamic> localVarResponse = await GetBucketsAsyncWithHttpInfo (region, limit, startAt);
			return localVarResponse.Data;

		}

		/// <summary>
		///  This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
		/// </summary>
		/// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
		/// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
		/// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
		/// <returns>Task of ApiResponse (Buckets)</returns>
		public async System.Threading.Tasks.Task<ApiResponse</*Buckets*/dynamic>> GetBucketsAsyncWithHttpInfo (string region = null, int? limit = null, string startAt = null) {

			var localVarPath = "/oss/v2/buckets";
			var localVarPathParams = new Dictionary<String, String> ();
			var localVarQueryParams = new Dictionary<String, String> ();
			var localVarHeaderParams = new Dictionary<String, String> (Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String> ();
			var localVarFileParams = new Dictionary<String, FileParameter> ();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String [] localVarHttpContentTypes = new String [] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType (localVarHttpContentTypes);

			// to determine the Accept header
			String [] localVarHttpHeaderAccepts = new String [] {
				"application/vnd.api+json",
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept (localVarHttpHeaderAccepts);
			if ( localVarHttpHeaderAccept != null )
				localVarHeaderParams.Add ("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add ("format", "json");
			if ( region != null )
				localVarQueryParams.Add ("region", Configuration.ApiClient.ParameterToString (region)); // query parameter
			if ( limit != null )
				localVarQueryParams.Add ("limit", Configuration.ApiClient.ParameterToString (limit)); // query parameter
			if ( startAt != null )
				localVarQueryParams.Add ("startAt", Configuration.ApiClient.ParameterToString (startAt)); // query parameter

			// authentication (oauth2_application) required
			// oauth required
			if ( !String.IsNullOrEmpty (Configuration.AccessToken) ) {
				localVarHeaderParams ["Authorization"] = "Bearer " + Configuration.AccessToken;
			}

			// make the HTTP request
			RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync (localVarPath,
				Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if ( ExceptionFactory != null ) {
				Exception exception = ExceptionFactory ("GetBuckets", localVarResponse);
				if ( exception != null )
					throw exception;
			}

			return new ApiResponse</*Buckets*/dynamic> (localVarStatusCode,
				localVarResponse.Headers.ToDictionary (x => x.Name, x => x.Value.ToString ()),
				/*(Buckets)*/ Configuration.ApiClient.Deserialize (localVarResponse, typeof (Buckets)));

		}

	}
}
