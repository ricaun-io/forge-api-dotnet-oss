/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Object json response
    /// </summary>
    [DataContract]
    public partial class ObjectDetails :  IEquatable<ObjectDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectDetails" /> class.
        /// </summary>
        /// <param name="BucketKey">Bucket key.</param>
        /// <param name="ObjectId">Object URN.</param>
        /// <param name="ObjectKey">Object name.</param>
        /// <param name="Sha1">Object SHA1.</param>
        /// <param name="Size">Object size.</param>
        /// <param name="ContentType">Object content-type.</param>
        /// <param name="Location">URL to download the object.</param>
        public ObjectDetails(string BucketKey = null, string ObjectId = null, string ObjectKey = null, byte[] Sha1 = null, int? Size = null, string ContentType = null, string Location = null)
        {
            this.BucketKey = BucketKey;
            this.ObjectId = ObjectId;
            this.ObjectKey = ObjectKey;
            this.Sha1 = Sha1;
            this.Size = Size;
            this.ContentType = ContentType;
            this.Location = Location;
        }
        
        /// <summary>
        /// Bucket key
        /// </summary>
        /// <value>Bucket key</value>
        [DataMember(Name="bucketKey", EmitDefaultValue=false)]
        public string BucketKey { get; set; }
        /// <summary>
        /// Object URN
        /// </summary>
        /// <value>Object URN</value>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }
        /// <summary>
        /// Object name
        /// </summary>
        /// <value>Object name</value>
        [DataMember(Name="objectKey", EmitDefaultValue=false)]
        public string ObjectKey { get; set; }
        /// <summary>
        /// Object SHA1
        /// </summary>
        /// <value>Object SHA1</value>
        [DataMember(Name="sha1", EmitDefaultValue=false)]
        public byte[] Sha1 { get; set; }
        /// <summary>
        /// Object size
        /// </summary>
        /// <value>Object size</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }
        /// <summary>
        /// Object content-type
        /// </summary>
        /// <value>Object content-type</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// URL to download the object
        /// </summary>
        /// <value>URL to download the object</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectDetails {\n");
            sb.Append("  BucketKey: ").Append(BucketKey).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectKey: ").Append(ObjectKey).Append("\n");
            sb.Append("  Sha1: ").Append(Sha1).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ObjectDetails);
        }

        /// <summary>
        /// Returns true if ObjectDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ObjectDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BucketKey == other.BucketKey ||
                    this.BucketKey != null &&
                    this.BucketKey.Equals(other.BucketKey)
                ) && 
                (
                    this.ObjectId == other.ObjectId ||
                    this.ObjectId != null &&
                    this.ObjectId.Equals(other.ObjectId)
                ) && 
                (
                    this.ObjectKey == other.ObjectKey ||
                    this.ObjectKey != null &&
                    this.ObjectKey.Equals(other.ObjectKey)
                ) && 
                (
                    this.Sha1 == other.Sha1 ||
                    this.Sha1 != null &&
                    this.Sha1.Equals(other.Sha1)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BucketKey != null)
                    hash = hash * 59 + this.BucketKey.GetHashCode();
                if (this.ObjectId != null)
                    hash = hash * 59 + this.ObjectId.GetHashCode();
                if (this.ObjectKey != null)
                    hash = hash * 59 + this.ObjectKey.GetHashCode();
                if (this.Sha1 != null)
                    hash = hash * 59 + this.Sha1.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                return hash;
            }
        }
    }

}

