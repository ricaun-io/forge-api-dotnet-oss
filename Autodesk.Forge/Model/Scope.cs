/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using System.ComponentModel;
using System.Reflection;

namespace Autodesk.Forge
{
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
	public class ForgeScopeAttribute : Attribute {

		public ForgeScopeAttribute (string val) {
			this.Scope =val ;
		}

		public virtual string Scope { get; set; }

	}

	public enum Scope {
		[ForgeScope ("data:read")]
		[Description ("The application will be able to read the end user’s data within the Autodesk ecosystem.")]
		DataRead,
		[ForgeScope ("data:write")]
		[Description ("The application will be able to create, update, and delete data on behalf of the end user within the Autodesk ecosystem.")]
		DataWrite,
		[ForgeScope ("data:create")]
		[Description ("The application will be able to create data on behalf of the end user within the Autodesk ecosystem.")]
		DataCreate,
		[ForgeScope ("data:search")]
		[Description ("The application will be able to search the end user’s data within the Autodesk ecosystem.")]
		DataSearch,
		[ForgeScope ("bucket:create")]
		[Description ("The application will be able to create an OSS bucket it will own.")]
		BucketCreate,
		[ForgeScope ("bucket:read")]
		[Description ("The application will be able to read the metadata and list contents for OSS buckets that it has access to.")]
		BucketRead,
		[ForgeScope ("bucket:update")]
		[Description ("The application will be able to set permissions and entitlements for OSS buckets that it has permission to modify.")]
		BucketUpdate,
		[ForgeScope ("bucket:delete")]
		[Description ("The application will be able to delete a bucket that it has permission to delete.")]
		BucketDelete,
		[ForgeScope ("code:all")]
		[Description ("The application will be able to author and execute code on behalf of the end user (e.g., scripts processed by the Design Automation API).")]
		CodeAll,
		[ForgeScope ("account:read")]
		[Description ("For Product APIs, the application will be able to read the account data the end user has entitlements to.")]
		AccountRead,
		[ForgeScope ("account:write")]
		[Description ("For Product APIs, the application will be able to update the account data the end user has entitlements to.")]
		AccountWrite,
		[ForgeScope ("user-profile:read")]
		[Description ("The application will be able to read the end user’s profile data.")]
		UserProfileRead,
		[ForgeScope ("viewables:read")]
		[Description ("The application will have read access to viewable resources such as thumbnails. This scope is a subset of data:read.")]
		ViewablesRead
	}

	public static class ForgeScopeExtensions {

		public static string AsString<T> (this T me) where T : struct {
			Type type =me.GetType () ;
			if ( !type.IsEnum )
				throw new ArgumentException ("Value must be of Enum type", "me") ;
			MemberInfo [] memberInfo =type.GetMember (me.ToString ()) ;
			if ( memberInfo != null && memberInfo.Length > 0 ) {
				object [] attrs =memberInfo [0].GetCustomAttributes (typeof (ForgeScopeAttribute), false) ;
				if ( attrs != null && attrs.Length > 0 )
					return (((ForgeScopeAttribute)attrs [0]).Scope) ;
			}
			return (me.ToString ()) ;
		}

		public static string AsString<T> (this T[] me) where T : struct {
			List<string> results =new List<string> () ;
			foreach ( T item in me )
				results.Add (item.AsString ()) ;
			return (string.Join (" ", results.ToArray ())) ;
		}

	}

}
#pragma warning restore 1591
