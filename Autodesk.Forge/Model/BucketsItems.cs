/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// BucketsItems
    /// </summary>
    [DataContract]
    public partial class BucketsItems :  IEquatable<BucketsItems>
    {
        /// <summary>
        /// Policy values: `transient`, `temporary` or `persistent` 
        /// </summary>
        /// <value>Policy values: `transient`, `temporary` or `persistent` </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PolicyKeyEnum
        {
            
            /// <summary>
            /// Enum Transient for "transient"
            /// </summary>
            [EnumMember(Value = "transient")]
            Transient,
            
            /// <summary>
            /// Enum Temporary for "temporary"
            /// </summary>
            [EnumMember(Value = "temporary")]
            Temporary,
            
            /// <summary>
            /// Enum Persistent for "persistent"
            /// </summary>
            [EnumMember(Value = "persistent")]
            Persistent
        }

        /// <summary>
        /// Policy values: `transient`, `temporary` or `persistent` 
        /// </summary>
        /// <value>Policy values: `transient`, `temporary` or `persistent` </value>
        [DataMember(Name="policyKey", EmitDefaultValue=false)]
        public PolicyKeyEnum? PolicyKey { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsItems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BucketsItems() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsItems" /> class.
        /// </summary>
        /// <param name="BucketKey">Bucket key (required).</param>
        /// <param name="CreatedDate">Timestamp in epoch time (required).</param>
        /// <param name="PolicyKey">Policy values: &#x60;transient&#x60;, &#x60;temporary&#x60; or &#x60;persistent&#x60;  (required).</param>
        public BucketsItems(string BucketKey = null, long? CreatedDate = null, PolicyKeyEnum? PolicyKey = null)
        {
            // to ensure "BucketKey" is required (not null)
            if (BucketKey == null)
            {
                throw new InvalidDataException("BucketKey is a required property for BucketsItems and cannot be null");
            }
            else
            {
                this.BucketKey = BucketKey;
            }
            // to ensure "CreatedDate" is required (not null)
            if (CreatedDate == null)
            {
                throw new InvalidDataException("CreatedDate is a required property for BucketsItems and cannot be null");
            }
            else
            {
                this.CreatedDate = CreatedDate;
            }
            // to ensure "PolicyKey" is required (not null)
            if (PolicyKey == null)
            {
                throw new InvalidDataException("PolicyKey is a required property for BucketsItems and cannot be null");
            }
            else
            {
                this.PolicyKey = PolicyKey;
            }
        }
        
        /// <summary>
        /// Bucket key
        /// </summary>
        /// <value>Bucket key</value>
        [DataMember(Name="bucketKey", EmitDefaultValue=false)]
        public string BucketKey { get; set; }
        /// <summary>
        /// Timestamp in epoch time
        /// </summary>
        /// <value>Timestamp in epoch time</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public long? CreatedDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BucketsItems {\n");
            sb.Append("  BucketKey: ").Append(BucketKey).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  PolicyKey: ").Append(PolicyKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BucketsItems);
        }

        /// <summary>
        /// Returns true if BucketsItems instances are equal
        /// </summary>
        /// <param name="other">Instance of BucketsItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BucketsItems other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BucketKey == other.BucketKey ||
                    this.BucketKey != null &&
                    this.BucketKey.Equals(other.BucketKey)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.PolicyKey == other.PolicyKey ||
                    this.PolicyKey != null &&
                    this.PolicyKey.Equals(other.PolicyKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BucketKey != null)
                    hash = hash * 59 + this.BucketKey.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.PolicyKey != null)
                    hash = hash * 59 + this.PolicyKey.GetHashCode();
                return hash;
            }
        }
    }

}

