/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model {

	/// <summary>
	/// Post PostCompleteS3UploadPayload Payload Body Structure
	/// </summary>
	[DataContract]
	public partial class PostCompleteS3UploadPayload : IEquatable<PostCompleteS3UploadPayload> {

		[DataMember (Name = "uploadKey", EmitDefaultValue = false)]
		public string uploadKey { get; set; }

		[DataMember (Name = "size", EmitDefaultValue = false)]
		public int? size { get; set; }

		[DataMember (Name = "eTags", EmitDefaultValue = false)]
		public List<String> eTags { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostCompleteS3UploadPayload" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected PostCompleteS3UploadPayload () { }

		public PostCompleteS3UploadPayload (string uploadKey, int? size, List<string> eTags = null) {
			if ( String.IsNullOrEmpty (uploadKey) )
				throw new InvalidDataException ("uploadKey is a required property for PostCompleteS3UploadPayload and cannot be null or empty");
			this.uploadKey = uploadKey;
			this.size = size;
			this.eTags = eTags;
		}

		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("class PostCompleteS3UploadPayload {\n");
			sb.Append ("  uploadKey: ").Append (uploadKey).Append ("\n");
			sb.Append ("  size: ").Append (size).Append ("\n");
			sb.Append ("  eTags: ").Append (eTags).Append ("\n");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

		public string ToJson () {
			return (JsonConvert.SerializeObject (this, Formatting.Indented));
		}

		public override bool Equals (object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals (obj as PostCompleteS3UploadPayload));
		}

		/// <summary>
		/// Returns true if PostCompleteS3UploadPayload instances are equal
		/// </summary>
		/// <param name="other">Instance of PostCompleteS3UploadPayload to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals (PostCompleteS3UploadPayload other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if ( other == null )
				return (false);

			return (
				(
					this.uploadKey == other.uploadKey ||
					this.uploadKey != null &&
					this.uploadKey.Equals (other.uploadKey)
				)
				&&
				(
					this.size == other.size ||
					this.size != null &&
					this.size.Equals (other.size)
				)
				&&
				(
					this.eTags == other.eTags ||
					this.eTags != null &&
					this.eTags.SequenceEqual (other.eTags)
				)
			);
		}

		public override int GetHashCode () {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if ( this.uploadKey != null )
					hash = hash * 59 + this.uploadKey.GetHashCode ();
				if ( this.size != null )
					hash = hash * 59 + this.size.GetHashCode ();
				if ( this.eTags != null )
					hash = hash * 59 + this.eTags.GetHashCode ();
				return (hash);
			}
		}

	}

}

