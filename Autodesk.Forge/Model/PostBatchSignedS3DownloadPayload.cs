/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model {

	/// <summary>
	/// Post PostBatchSignedS3DownloadPayloadItem Payload Body Structure
	/// </summary>
	[DataContract]
	public partial class PostBatchSignedS3DownloadPayloadItem : IEquatable<PostBatchSignedS3DownloadPayloadItem> {

		[DataMember (Name = "objectKey", EmitDefaultValue = false)]
		public string objectKey { get; set; }

		[DataMember (Name = "response-content-type", EmitDefaultValue = false)]
		public string responseContentType { get; set; }

		[DataMember (Name = "response-content-disposition", EmitDefaultValue = false)]
		public string responseContentDisposition { get; set; }

		[DataMember (Name = "response-cache-control", EmitDefaultValue = false)]
		public string responseCacheControl { get; set; }

		[DataMember (Name = "If-None-Match", EmitDefaultValue = false)]
		public string IfNoneMatch { get; set; }

		[DataMember (Name = "If-Modified-Since", EmitDefaultValue = false)]
		public string IfModifiedSince { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBatchSignedS3DownloadPayloadItem" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected PostBatchSignedS3DownloadPayloadItem () { }

		public PostBatchSignedS3DownloadPayloadItem (
			string objectKey,
			string responseContentType = null,
			string responseContentDisposition = null,
			string responseCacheControl = null,
			string IfNoneMatch = null,
			string IfModifiedSince = null
		) {
			if ( objectKey == null )
				throw new InvalidDataException ("objectKey is a required property for PostBatchSignedS3DownloadPayloadItem and cannot be null");
			this.objectKey = objectKey;
			this.responseContentType = responseContentType;
			this.responseContentDisposition = responseContentDisposition;
			this.responseCacheControl = responseCacheControl;
			this.IfNoneMatch = IfNoneMatch;
			this.IfModifiedSince = IfModifiedSince;
		}

		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("class PostBatchSignedS3DownloadPayloadItem {\n");
			sb.Append ("  objectKey: ").Append (objectKey).Append ("\n");
			sb.Append ("  response-content-type: ").Append (responseContentType).Append ("\n");
			sb.Append ("  response-content-disposition: ").Append (responseContentDisposition).Append ("\n");
			sb.Append ("  response-cache-control: ").Append (responseCacheControl).Append ("\n");
			sb.Append ("  If-None-Match: ").Append (IfNoneMatch).Append ("\n");
			sb.Append ("  If-Modified-Since: ").Append (IfModifiedSince).Append ("\n");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

		public string ToJson () {
			return (JsonConvert.SerializeObject (this, Formatting.Indented));
		}

		public override bool Equals (object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals (obj as PostBatchSignedS3DownloadPayloadItem));
		}

		/// <summary>
		/// Returns true if PostBatchSignedS3DownloadPayload instances are equal
		/// </summary>
		/// <param name="other">Instance of PostBatchSignedS3DownloadPayload to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals (PostBatchSignedS3DownloadPayloadItem other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if ( other == null )
				return (false);

			return (
				(
					this.objectKey == other.objectKey ||
					this.objectKey != null &&
					this.objectKey.Equals (other.objectKey)
				)
				&&
				(
					this.responseContentType == other.objectKey ||
					this.responseContentType != null &&
					this.responseContentType.Equals (other.responseContentType)
				)
				&&
				(
					this.responseContentDisposition == other.responseContentDisposition ||
					this.responseContentDisposition != null &&
					this.responseContentDisposition.Equals (other.responseContentDisposition)
				)
				&&
				(
					this.responseCacheControl == other.responseCacheControl ||
					this.responseCacheControl != null &&
					this.responseCacheControl.Equals (other.responseCacheControl)
				)
				&&
				(
					this.IfNoneMatch == other.IfNoneMatch ||
					this.IfNoneMatch != null &&
					this.IfNoneMatch.Equals (other.IfNoneMatch)
				)
				&&
				(
					this.IfModifiedSince == other.IfModifiedSince ||
					this.IfModifiedSince != null &&
					this.IfModifiedSince.Equals (other.IfNoneMatch)
				)
			);
		}

		public override int GetHashCode () {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if ( this.objectKey != null )
					hash = hash * 59 + this.objectKey.GetHashCode ();
				if ( this.responseContentType != null )
					hash = hash * 59 + this.responseContentType.GetHashCode ();
				if ( this.responseContentDisposition != null )
					hash = hash * 59 + this.responseContentDisposition.GetHashCode ();
				if ( this.responseCacheControl != null )
					hash = hash * 59 + this.responseCacheControl.GetHashCode ();
				if ( this.IfNoneMatch != null )
					hash = hash * 59 + this.IfNoneMatch.GetHashCode ();
				if ( this.IfModifiedSince != null )
					hash = hash * 59 + this.IfModifiedSince.GetHashCode ();
				return (hash);
			}
		}

	}

	/// <summary>
	/// Post PostBatchSignedS3DownloadPayload Payload Body Structure
	/// </summary>
	[DataContract]
	public partial class PostBatchSignedS3DownloadPayload :  IEquatable<PostBatchSignedS3DownloadPayload> {
		
		[DataMember(Name="requests", EmitDefaultValue=false)]
		public List<PostBatchSignedS3DownloadPayloadItem> requests { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBatchSignedS3DownloadPayload" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		public PostBatchSignedS3DownloadPayload() {
			this.requests = new List<PostBatchSignedS3DownloadPayloadItem> ();
		}

		public PostBatchSignedS3DownloadPayload(PostBatchSignedS3DownloadPayloadItem item = null) {
			this.requests = new List<PostBatchSignedS3DownloadPayloadItem> () { item };
		}

		public PostBatchSignedS3DownloadPayload (List<PostBatchSignedS3DownloadPayloadItem> items = null) {
			if ( items == null )
				//throw new InvalidDataException("items is a required property for PostBatchSignedS3DownloadPayload and cannot be null");
				items = new List<PostBatchSignedS3DownloadPayloadItem> ();
			this.requests = items;
		}

		public override string ToString() {
			var sb = new StringBuilder();
			sb.Append("class PostBatchSignedS3DownloadPayload {\n");
			sb.Append("  requests: ").Append(requests).Append("\n");
			sb.Append("}\n");
			return (sb.ToString());
		}
  
		public string ToJson() {
			return (JsonConvert.SerializeObject(this, Formatting.Indented));
		}

		public override bool Equals(object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals(obj as PostBatchSignedS3DownloadPayload));
		}

		/// <summary>
		/// Returns true if PostBatchSignedS3DownloadPayload instances are equal
		/// </summary>
		/// <param name="other">Instance of PostBatchSignedS3DownloadPayload to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(PostBatchSignedS3DownloadPayload other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if (other == null)
				return (false);

			return (
				(
					this.requests == other.requests ||
					this.requests != null &&
					this.requests.SequenceEqual(other.requests)
				)
			);
		}

		public override int GetHashCode() {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if (this.requests != null)
					hash = hash * 59 + this.requests.GetHashCode();
				return (hash);
			}
		}

	}

}

