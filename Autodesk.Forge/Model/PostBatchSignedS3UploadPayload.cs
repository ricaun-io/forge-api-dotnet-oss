/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model {

	/// <summary>
	/// Post PostBatchSignedS3UploadPayloadItem Payload Body Structure
	/// </summary>
	[DataContract]
	public partial class PostBatchSignedS3UploadPayloadItem : IEquatable<PostBatchSignedS3UploadPayloadItem> {

		[DataMember (Name = "objectKey", EmitDefaultValue = false)]
		public string objectKey { get; set; }

		[DataMember (Name = "firstPart", EmitDefaultValue = false)]
		public int? firstPart { get; set; }

		[DataMember (Name = "parts", EmitDefaultValue = false)]
		public int? parts { get; set; }

		[DataMember (Name = "uploadKey", EmitDefaultValue = false)]
		public string uploadKey { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBatchSignedS3UploadPayloadItem" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected PostBatchSignedS3UploadPayloadItem () { }

		public PostBatchSignedS3UploadPayloadItem (
			string objectKey,
			int? firstPart,
			int? parts,
			string uploadKey = null
		) {
			if ( objectKey == null )
				throw new InvalidDataException ("objectKey is a required property for PostBatchSignedS3UploadPayloadItem and cannot be null");
			this.objectKey = objectKey;
			this.firstPart = firstPart;
			this.parts = parts;
			this.uploadKey = uploadKey;
		}

		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("class PostBatchSignedS3UploadPayloadItem {\n");
			sb.Append ("  objectKey: ").Append (objectKey).Append ("\n");
			sb.Append ("  firstPart: ").Append (firstPart).Append ("\n");
			sb.Append ("  parts: ").Append (parts).Append ("\n");
			sb.Append ("  uploadKey: ").Append (uploadKey).Append ("\n");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

		public string ToJson () {
			return (JsonConvert.SerializeObject (this, Formatting.Indented));
		}

		public override bool Equals (object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals (obj as PostBatchSignedS3UploadPayloadItem));
		}

		/// <summary>
		/// Returns true if PostBatchSignedS3UploadPayload instances are equal
		/// </summary>
		/// <param name="other">Instance of PostBatchSignedS3UploadPayload to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals (PostBatchSignedS3UploadPayloadItem other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if ( other == null )
				return (false);

			return (
				(
					this.objectKey == other.objectKey ||
					this.objectKey != null &&
					this.objectKey.Equals (other.objectKey)
				)
				&&
				(
					this.firstPart == other.firstPart ||
					this.firstPart != null &&
					this.firstPart.Equals (other.firstPart)
				)
				&&
				(
					this.parts == other.parts ||
					this.parts != null &&
					this.parts.Equals (other.parts)
				)
				&&
				(
					this.uploadKey == other.uploadKey ||
					this.uploadKey != null &&
					this.uploadKey.Equals (other.uploadKey)
				)
			);
		}

		public override int GetHashCode () {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if ( this.objectKey != null )
					hash = hash * 59 + this.objectKey.GetHashCode ();
				if ( this.firstPart != null )
					hash = hash * 59 + this.firstPart.GetHashCode ();
				if ( this.parts != null )
					hash = hash * 59 + this.parts.GetHashCode ();
				if ( this.uploadKey != null )
					hash = hash * 59 + this.uploadKey.GetHashCode ();
				return (hash);
			}
		}

	}

	/// <summary>
	/// Post PostBatchSignedS3UploadPayload Payload Body Structure
	/// </summary>
	[DataContract]
	public partial class PostBatchSignedS3UploadPayload : IEquatable<PostBatchSignedS3UploadPayload> {

		[DataMember (Name = "requests", EmitDefaultValue = false)]
		public List<PostBatchSignedS3UploadPayloadItem> requests { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBatchSignedS3UploadPayload" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected PostBatchSignedS3UploadPayload () { }

		public PostBatchSignedS3UploadPayload (PostBatchSignedS3UploadPayloadItem item = null) {
			this.requests = new List<PostBatchSignedS3UploadPayloadItem> () { item };
		}

		public PostBatchSignedS3UploadPayload (List<PostBatchSignedS3UploadPayloadItem> items = null) {
			if ( items == null )
				items = new List<PostBatchSignedS3UploadPayloadItem> ();
			//throw new InvalidDataException ("items is a required property for PostBatchSignedS3UploadPayload and cannot be null");
			this.requests = items;
		}

		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("class PostBatchSignedS3UploadPayload {\n");
			sb.Append ("  requests: ").Append (requests).Append ("\n");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

		public string ToJson () {
			return (JsonConvert.SerializeObject (this, Formatting.Indented));
		}

		public override bool Equals (object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals (obj as PostBatchSignedS3UploadPayload));
		}

		/// <summary>
		/// Returns true if PostBatchSignedS3UploadPayload instances are equal
		/// </summary>
		/// <param name="other">Instance of PostBatchSignedS3UploadPayload to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals (PostBatchSignedS3UploadPayload other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if ( other == null )
				return (false);

			return (
				(
					this.requests == other.requests ||
					this.requests != null &&
					this.requests.SequenceEqual (other.requests)
				)
			);
		}

		public override int GetHashCode () {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if ( this.requests != null )
					hash = hash * 59 + this.requests.GetHashCode ();
				return (hash);
			}
		}

	}

}

