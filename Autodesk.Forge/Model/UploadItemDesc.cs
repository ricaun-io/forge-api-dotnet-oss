/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model {

	public delegate void UploadItemsCallBack (float progress, TimeSpan elapsed, List<UploadItemDesc> objects);

	/// <summary>
	/// Post UploadItemDesc Payload Body Structure
	/// </summary>
	public partial class UploadItemDesc {

		public string objectKey { get; set; }
		public string uploadKey { get; set; }
		public List<string> eTags { get; set; }
		public string xAdsMetaContentType { get; set; }
		public string xAdsMetaContentDisposition { get; set; }
		public string xAdsMetaContentEncoding { get; set; }
		public string xAdsMetaCacheControl { get; set; }

		protected Stream dataStream = null;
		protected byte [] dataBytes = null;
		public dynamic data {
			get {
				if ( dataStream != null )
					return (dataStream);
				else
					return (dataBytes);
			}
			set {
				if ( value is Stream )
					dataStream = value;
				else if ( value is string )
					dataBytes = Encoding.UTF8.GetBytes (value);
				else
					dataBytes = value;
			}
		}
		public long Length {
			get {
				if ( dataBytes != null )
					return ((long)dataBytes.Length);
				if ( dataStream != null )
					return (dataStream.Length);
				return (0);
			}
		}
		public bool isStream {  get { return (dataStream != null); } }

		public float Progress { get; set; }
		public List<string> uploadUrls { get; set; }
		public dynamic uploads { get; set; }
		public dynamic completedResponse { get; set; }
		public dynamic completed { get; set; }

		public bool Error { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="UploadItemDesc" /> class.
		/// </summary>
		protected UploadItemDesc () { }

		public UploadItemDesc (
			string objectKey,
			dynamic data = null,
			string xAdsMetaContentType = null,
			string xAdsMetaContentDisposition = null,
			string xAdsMetaContentEncoding = null,
			string xAdsMetaCacheControl = null
		) {
			if ( objectKey == null )
				throw new InvalidDataException ("objectKey is a required property for UploadItemDesc and cannot be null");
			if ( data == null )
				throw new InvalidDataException ("data is a required property for UploadItemDesc and cannot be null");
			this.objectKey = objectKey;
			this.data = data;
			this.uploadKey = null;

			this.xAdsMetaContentType = xAdsMetaContentType;
			this.xAdsMetaContentDisposition = xAdsMetaContentDisposition;
			this.xAdsMetaContentEncoding = xAdsMetaContentEncoding;
			this.xAdsMetaCacheControl = xAdsMetaCacheControl;
		}

		public byte[] chunk { get; set; }

		public byte[] Chunk (long start, long length) {
			//return (dataBytes.Skip(start).Take(length).ToArray()); // slow
			byte[] chunk = new byte [length];
			Array.Copy (dataBytes, start, chunk, 0, length);
			return (chunk);
		}

		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("UploadItemDesc {");
			sb.Append (" objectKey: \"").Append (objectKey).Append ("\",");
			sb.Append (" uploadKey: \"").Append (uploadKey).Append ("\",");
			sb.Append (" eTags: [").Append (eTags != null ? string.Join (", ", eTags) : "").Append ("],");
			sb.Append (" Progress: ").Append (Progress).Append (",");
			sb.Append (" completed: ").Append (completed != null ? completed.ToString() : "null");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

	}

}

