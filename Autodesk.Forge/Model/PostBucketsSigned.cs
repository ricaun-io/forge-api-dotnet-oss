/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *

 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model {
	/// <summary>
	/// PostBucketsSigned
	/// </summary>
	[DataContract]
	public partial class PostBucketsSigned : IEquatable<PostBucketsSigned> {

		/// <summary>
		/// Expiration time in minutes Default value: 60 
		/// </summary>
		/// <value>Expiration time in minutes Default value: 60 </value>
		[DataMember (Name = "minutesExpiration", EmitDefaultValue = false)]
		public int? MinutesExpiration { get; set; }

		[DataMember (Name = "singleUse", EmitDefaultValue = false)]
		public bool SingleUse { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBucketsSigned" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected PostBucketsSigned () { }

		/// <summary>
		/// Initializes a new instance of the <see cref="PostBucketsSigned" /> class.
		/// </summary>
		/// <param name="MinutesExpiration">Expiration time in minutes Default value: 60  (required) (default to 60).</param>
		public PostBucketsSigned (int? MinutesExpiration = null, bool singleUse = false) {
			this.MinutesExpiration = MinutesExpiration == null ? 60 : MinutesExpiration;
			this.SingleUse = singleUse;
		}

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString () {
			var sb = new StringBuilder ();
			sb.Append ("class PostBucketsSigned {\n");
			sb.Append ("  MinutesExpiration: ").Append (MinutesExpiration).Append ("\n");
			sb.Append ("  SingleUse: ").Append (SingleUse).Append ("\n");
			sb.Append ("}\n");
			return (sb.ToString ());
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson () {
			return (JsonConvert.SerializeObject (this, Formatting.Indented));
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals (object obj) {
			// credit: http://stackoverflow.com/a/10454552/677735
			return (this.Equals (obj as PostBucketsSigned));
		}

		/// <summary>
		/// Returns true if PostBucketsSigned instances are equal
		/// </summary>
		/// <param name="other">Instance of PostBucketsSigned to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals (PostBucketsSigned other) {
			// credit: http://stackoverflow.com/a/10454552/677735
			if ( other == null )
				return (false);

			return (
				(
					this.MinutesExpiration == other.MinutesExpiration ||
					this.MinutesExpiration != null &&
					this.MinutesExpiration.Equals (other.MinutesExpiration)
				)
				&&
				(
					this.SingleUse == other.SingleUse && //||
					//this.SingleUse != null &&
					this.SingleUse.Equals (other.SingleUse)
				)
			);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode () {
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if ( this.MinutesExpiration != null )
					hash = hash * 59 + this.MinutesExpiration.GetHashCode ();
				hash = hash * 59 + this.SingleUse.GetHashCode ();
				return (hash);
			}
		}
	}

}

